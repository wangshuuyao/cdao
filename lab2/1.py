def max_product(n):
    if n == 2:
        return [1, 1]
    if n == 3:
        return [2, 1]
    if n % 3 == 0:
        return [3] * (n // 3)
    if n % 3 == 1:
        return [4] * ((n // 3) - 1) + [2, 2]
    if n % 3 == 2:
        return [4] * (n // 3) + [2]


n = 2001
result = max_product(n)
print(result)

# 将 n 分解为尽可能多的 3 和 2 的和是获得最大的乘积。这是因为，对于给定的 n，3 和 2 是较小的正整数中能够使乘积最大化的数字。
# 1. 如果 n 能够被 3 整除，那么将 n 分解为多个 3 的和，例如，n = 9，可以分解为 [3, 3, 3]，这样乘积为 3 * 3 * 3 = 27，这是最大的乘积。
# 2. 如果 n 除以 3 余数为 1，那么将 n - 4 分解为多个 3 的和，然后再加上一个 2，例如，n = 10，可以分解为 [3, 3, 3, 2]，这样乘积为 3 * 3 * 3 * 2 = 54，这是最大的乘积。
# 3. 如果 n 除以 3 余数为 2，那么将 n 分解为多个 3 的和，例如，n = 11，可以分解为 [3, 3, 3, 2], 乘积为 3 * 3 * 3 * 2 = 54，同样是最大的乘积。
